{
	"info": {
		"_postman_id": "67d7aec6-7060-4a90-a238-74c1dbbf4fdc",
		"name": "Marchenko_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first?name=Juju&age=27",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Juju"
						},
						{
							"key": "age",
							"value": "27"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\"), function () {\r",
							"    pm.response.to.have.status(200);\r",
							"};\r",
							"\r",
							"//Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//Спарсить request\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"name в ответе равно name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name)\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"age в ответе равно age s request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age)\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"salary в ответе равно salary s request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log (\"family:\", jsonData.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"в параметр dog есть параметр name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"в параметр dog есть параметр age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"в параметр name есть параметр Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.have.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"в параметр age есть параметр 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.have.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Vika&age=28&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vika"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в JSON \r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками) \r",
							"pm.test(\"name в ответе равно name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Juju');\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками)\r",
							"pm.test(\"age в ответе равно age s request\", function () {\r",
							"    pm.expect(+jsonData.age).to.eql(27);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками)\r",
							"pm.test(\"salary в ответе равно salary s request\", function () {\r",
							"    pm.expect(+jsonData.salary).to.eql(700);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"var reqData = request.data;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"name в ответе равно name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name)\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"age в ответе равно age s request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age)\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"salary в ответе равно salary s request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log (\"family:\", jsonData.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 \r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(+reqData.salary*4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Juju",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\"), function () {\r",
							"    pm.response.to.have.status(200);\r",
							"};\r",
							"\r",
							"//Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"name в ответе равно name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name)\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"age в ответе равно age s request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+reqData.age)\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request\r",
							"console.log (\"salary:\", reqData.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response\r",
							"console.log (\"salary:\", jsonData.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log (\"salary 0:\", jsonData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log (\"salary 1:\", jsonData.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log (\"salary 2:\", jsonData.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"salary [0] в ответе равно salary s request [0]\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"salary [1] в ответе равно salary s request [1]\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(reqData.salary*2)\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"salary [2] в ответе равно salary s request [2]\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(reqData.salary*3)\r",
							"});\r",
							"\r",
							"//Передать в окружении переменную name\r",
							"pm.environment.set(\"name\", reqData.name);\r",
							"\r",
							"//Передать в окружении переменную age\r",
							"pm.environment.set(\"age\", reqData.age)\r",
							"\r",
							"//Передать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", reqData.salary)\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (i in jsonData.salary){\r",
							"    console.log(\"Цикл\"+i)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Juju&age=27&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Juju"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\"), function () {\r",
							"    pm.response.to.have.status(200);\r",
							"};\r",
							"\r",
							"//Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"var reqData = request.data;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response имеет параметр person\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"параметр start_qa_salary равен salary из request\", function() {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+reqData.salary)\r",
							"}); \r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"параметр qa_salary_after_6_months равен salary*2 из request\", function() {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+reqData.salary*2)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"параметр qa_salary_after_12_months равен salary*2.7 из request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"параметр qa_salary_after_12_months равен salary*2.7 из request\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.salary*3.3)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"параметр qa_salary_after_3.5_years равен salary*3.8 из request\" , function() {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.salary*3.8)\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"параметре person, 1-й элемент из u_name равен salary из request\", function() {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test(\"параметр u_age равен age из request\", function() {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqData.age)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"параметр u_salary_5_years равен salary*4.2 из request\", function() {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+reqData.salary*4.2)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Juju",
							"type": "default"
						},
						{
							"key": "age",
							"value": "27",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "800",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}